package EmployeeApp;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmployeeAppRun {
    public static void main(String[] args) throws IOException {
//Reading information from files related to employees and tasks
        String inputEmployeePath = "C:\\Users\\Admin\\Desktop\\InputEmployeeApp.txt";
        String inputTasksPath = "C:\\Users\\Admin\\Desktop\\InputTaskApp.txt";
        String outputPath = "C:\\Users\\Admin\\Desktop\\OutputEmployeeApp.txt";

        BufferedReader inEmployee = new BufferedReader(new FileReader(inputEmployeePath));
        BufferedReader inTask = new BufferedReader(new FileReader(inputTasksPath));
        BufferedWriter out = new BufferedWriter(new FileWriter(outputPath));
//Create a map of all employees
        Map<String, Employee> allEmployees = new HashMap<>();
//Create a map of all tasks
        Map<String, Task> allTasks = new HashMap<>();
        Map<String, List<Task>> employeeTasksList = new HashMap<>();
//Read and Create all employees
        String lineEmployee = inEmployee.readLine();
        while (lineEmployee != null) {
            createEmployee(lineEmployee, allEmployees);
            lineEmployee = inEmployee.readLine();
        }
//print current report related to all employees
        printReportEmployees(allEmployees);
//Read and Create all tasks
        String lineTasks = inTask.readLine();
        while (lineTasks != null) {
            createTask(lineTasks, allTasks, employeeTasksList);
            lineTasks = inTask.readLine();
        }
//print current report related to all tasks
        printReportTasks(allTasks);

//Update employee information
        //Updated phone number
        String newPhoneNumberDesislava = "+359898123456";
        allEmployees.get("Desislava Ivanova").setPhoneNumber(newPhoneNumberDesislava);
        //Updated salary
        Double salaryUpdate = allEmployees.get("Radoslav Minchev").getMonthlySalary() * 1.2;
        allEmployees.get("Radoslav Minchev").setMonthlySalary(salaryUpdate);
        //Updated full name
        String changeFullName = "Marina Terzieva";
        allEmployees.get("Marina Ivanova").setFullName(changeFullName);
        //Updated email
        String changeEmail = "alexander.trifonov@icloud.com";
        allEmployees.get("Alexander Trifonov").setEmail(changeEmail);
//print current report related to all employees
        printReportEmployees(allEmployees);
//Delete employee and correction of all related information
        String fullNameEmployeeDeletion = "Hristina Kostova";
        String fullNameEmployeeWhichReferenceTasksFromDeletionEmployee = "Desislava Ivanova";
        allEmployees.remove("Hristina Kostova");
        if (employeeTasksList.containsKey(fullNameEmployeeDeletion)){
            List<Task> temporaryList = employeeTasksList.get(fullNameEmployeeDeletion);
            employeeTasksList.remove(fullNameEmployeeDeletion);
            if (!employeeTasksList.containsKey(fullNameEmployeeWhichReferenceTasksFromDeletionEmployee)) {
                employeeTasksList.put(fullNameEmployeeWhichReferenceTasksFromDeletionEmployee, temporaryList);
            } else {
                for (Task task : temporaryList) {
                    employeeTasksList.get(fullNameEmployeeWhichReferenceTasksFromDeletionEmployee).add(task);
                }
            }
        }
        for (Task value : allTasks.values()) {
          if (value.getAssignedEmployeeFullName().equals(fullNameEmployeeDeletion)){
              value.setAssignedEmployeeFullName(fullNameEmployeeWhichReferenceTasksFromDeletionEmployee);
          }
        }


        inEmployee.close();
        out.close();
    }

    private static void printReportTasks(Map<String, Task> allTasks) {
        allTasks.values().forEach(t -> System.out.println(t.toString()));
    }

    private static void printReportEmployees(Map<String, Employee> allEmployee) {
        allEmployee.values().forEach(e -> System.out.println(e.toString()));
    }

    private static void createTask(String lineTasks, Map<String, Task> allTasks,
                                   Map<String, List<Task>> employeeTasksList) {
        String[] tokens = lineTasks.split(", ");
        String title = tokens[0];
        String description = tokens[1];
        String assignedEmployeeFullName = tokens[2];
        String dueDate = tokens[3];
        String statusCompleted = tokens[4];
        Task task = new Task(title, description, assignedEmployeeFullName, dueDate, statusCompleted);
        allTasks.putIfAbsent(title, task);
        if (!employeeTasksList.containsKey(assignedEmployeeFullName)) {
            employeeTasksList.put(assignedEmployeeFullName, new ArrayList<>());
            employeeTasksList.get(assignedEmployeeFullName).add(task);
        } else {
            employeeTasksList.get(assignedEmployeeFullName).add(task);
        }
    }

    private static void createEmployee(String line, Map<String, Employee> allEmployee) {
        String[] tokens = line.split(", ");
        String fullName = tokens[0];
        String email = tokens[1];
        String phoneNumber = tokens[2];
        String dateOfBirth = tokens[3];
        Double monthlySalary = Double.parseDouble(tokens[4]);
        Employee employee =
                new Employee(fullName, email, phoneNumber, dateOfBirth, monthlySalary);
        allEmployee.putIfAbsent(fullName, employee);
    }
}

package EmployeeApp;

import java.io.*;
import java.util.*;

public class EmployeeAppRun {
    public static void main(String[] args) throws IOException {
//Reading information from files related to employees and tasks
        String inputEmployeePath = "C:\\Users\\Admin\\Desktop\\Employees_Tasks\\InputEmployeeApp.txt";
        String inputTasksPath = "C:\\Users\\Admin\\Desktop\\Employees_Tasks\\InputTaskApp.txt";
        String outputPath = "C:\\Users\\Admin\\Desktop\\Employees_Tasks\\OutputEmployeeApp.txt";

        BufferedReader inEmployee = new BufferedReader(new FileReader(inputEmployeePath));
        BufferedReader inTask = new BufferedReader(new FileReader(inputTasksPath));
        BufferedWriter out = new BufferedWriter(new FileWriter(outputPath));
//Create a map of all employees
        Map<String, Employee> allEmployees = new LinkedHashMap<>();
//Create a map of all tasks
        Map<String, List<Task>> employeeTasksList = new LinkedHashMap<>();
//Read and Create all employees
        String lineEmployee = inEmployee.readLine();
        while (lineEmployee != null) {
            createEmployee(lineEmployee, allEmployees);
            lineEmployee = inEmployee.readLine();
        }
//print current report related to all employees
        printReportEmployees(allEmployees);
//Read and Create all tasks
        String lineTasks = inTask.readLine();
        while (lineTasks != null) {
            createTask(lineTasks, employeeTasksList);
            lineTasks = inTask.readLine();
        }

//Update employee information
        //Updated phone number
        updatedEmployeePhoneNumber("+359898123456", "Desislava Ivanova", allEmployees);
        //Updated salary
        updatedEmployeeSalary(1.2, "Radoslav Minchev", allEmployees);
        //Updated full name
        updatedEmployeeFullName("Marina Ivanova", "Marina Terzieva",
                allEmployees, employeeTasksList);
        //Updated email
        updatedEmployeeEmail("alexander.trifonov@icloud.com", "Alexander Trifonov", allEmployees);

//Delete employee and correction of all related information
        deleteEmployee("Hristina Kostova",
                "Desislava Ivanova",
                allEmployees, employeeTasksList);
//print current report related to all employees and tasks
        printReportEmployees(allEmployees);
        printReportTasks(employeeTasksList);

//Update Tasks
        //Updated title
        updatedTaskTitle("Title1000", "Title15", employeeTasksList);
        //Updated description
        updatedTaskDescription("description1000", "description15", employeeTasksList);
        //Updated assignedEmployeeFullName
        updatedTaskAssignedEmployeeFullName("Desislava Ivanova", "Yani Georgiev", employeeTasksList);
        //Updated dueDate
        updatedTaskDueDate("2023-Feb-20", "2023-Mar-02", employeeTasksList);
        //Updated statusCompleted
        updatedTaskStatusCompleted("yes", "no", employeeTasksList);
//Delete task
        deleteTask("Title1", employeeTasksList);
//print current report related to all employees and tasks
        printReportEmployees(allEmployees);
        printReportTasks(employeeTasksList);

        inEmployee.close();
        out.close();
    }

    private static void deleteTask(String titleTaskForDeletion, Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            if (entry.getValue().get(0).getTitle().equals(titleTaskForDeletion)) {
                entry.getValue().remove(0);
            }
        }
    }

    private static void updatedTaskStatusCompleted(String updateStatusCompleted, String oldStatusCompletede,
                                                   Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            if (entry.getValue().get(4).getStatusCompleted().equals(oldStatusCompletede)) {
                entry.getValue().get(4).setStatusCompleted(updateStatusCompleted);
            }
        }
    }

    private static void updatedTaskDueDate(String updateDueDate, String oldDueDate,
                                           Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            if (entry.getValue().get(3).getDueDate().equals(oldDueDate)) {
                entry.getValue().get(3).setDueDate(updateDueDate);
            }
        }
    }

    private static void updatedTaskAssignedEmployeeFullName(String updateAssignedEmployeeFullName,
                                                            String oldAssignedEmployeeFullName,
                                                            Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            if (entry.getValue().get(2).getAssignedEmployeeFullName().equals(oldAssignedEmployeeFullName)) {
                entry.getValue().get(2).setAssignedEmployeeFullName(updateAssignedEmployeeFullName);
            }
        }
    }

    private static void updatedTaskDescription(String updateDescription, String oldDescription,
                                               Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            if (entry.getValue().get(1).getDescription().equals(oldDescription)) {
                entry.getValue().get(1).setDescription(updateDescription);
            }
        }
    }

    private static void updatedTaskTitle(String updatedTitle, String oldTitle,
                                         Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            if (entry.getValue().get(0).getTitle().equals(oldTitle)) {
                entry.getValue().get(0).setTitle(updatedTitle);
            }
        }
    }

    private static void deleteEmployee(String fullNameEmployeeDeletion,
                                       String fullNameEmployeeWhichReferenceTasksFromDeletionEmployee,
                                       Map<String, Employee> allEmployees,
                                       Map<String, List<Task>> employeeTasksList) {
        allEmployees.remove(fullNameEmployeeDeletion);
        if (employeeTasksList.containsKey(fullNameEmployeeDeletion)) {
            List<Task> temporaryList = employeeTasksList.get(fullNameEmployeeDeletion);
            employeeTasksList.remove(fullNameEmployeeDeletion);
            if (!employeeTasksList.containsKey(fullNameEmployeeWhichReferenceTasksFromDeletionEmployee)) {
                employeeTasksList.put(fullNameEmployeeWhichReferenceTasksFromDeletionEmployee, temporaryList);
            } else {
                for (Task task : temporaryList) {
                    employeeTasksList.get(fullNameEmployeeWhichReferenceTasksFromDeletionEmployee).add(task);
                }
            }
        }
    }

    private static void updatedEmployeeEmail(String updatedEmail, String fullNameEmployee, Map<String, Employee> allEmployees) {
        allEmployees.get(fullNameEmployee).setEmail(updatedEmail);
    }

    private static void updatedEmployeeFullName(String oldName,
                                                String updatedName,
                                                Map<String, Employee> allEmployees,
                                                Map<String, List<Task>> employeeTasksList) {
        //update FullName in allEmployeesMap
        allEmployees.get(oldName).setFullName(updatedName);
        Employee employeeWithUpdatedName = allEmployees.get(oldName);
        allEmployees.remove(oldName);
        allEmployees.put(updatedName, employeeWithUpdatedName);
        //update FullName in employeeTasksListMap
        if (employeeTasksList.containsKey(oldName)) {
            List<Task> temporaryList = employeeTasksList.get(oldName);
            employeeTasksList.remove(oldName);
            employeeTasksList.putIfAbsent(updatedName, new ArrayList<>());
            for (Task task : temporaryList) {
                employeeTasksList.get(updatedName).add(task);
            }
        }
    }

    private static void updatedEmployeeSalary(double multiplier, String fullNameEmployee, Map<String, Employee> allEmployees) {
        Double salaryUpdate = allEmployees.get(fullNameEmployee).getMonthlySalary() * multiplier;
        allEmployees.get(fullNameEmployee).setMonthlySalary(salaryUpdate);
    }

    private static void updatedEmployeePhoneNumber(String phoneNumberUpdate, String fullNameEmployee,
                                                   Map<String, Employee> allEmployee) {
        allEmployee.get(fullNameEmployee).setPhoneNumber(phoneNumberUpdate);
    }

    private static void printReportTasks(Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            entry.getValue().forEach(t -> System.out.println(t.toString()));
        }
    }

    private static void printReportEmployees(Map<String, Employee> allEmployee) {
        allEmployee.values().forEach(e -> System.out.println(e.toString()));
    }

    private static void createTask(String lineTasks, Map<String, List<Task>> employeeTasksList) {
        String[] tokens = lineTasks.split(", ");
        String title = tokens[0];
        String description = tokens[1];
        String assignedEmployeeFullName = tokens[2];
        String dueDate = tokens[3];
        String statusCompleted = tokens[4];
        Task task = new Task(title, description, assignedEmployeeFullName, dueDate, statusCompleted);
        if (!employeeTasksList.containsKey(assignedEmployeeFullName)) {
            employeeTasksList.put(assignedEmployeeFullName, new ArrayList<>());
            employeeTasksList.get(assignedEmployeeFullName).add(task);
        } else {
            employeeTasksList.get(assignedEmployeeFullName).add(task);
        }
    }

    private static void createEmployee(String line, Map<String, Employee> allEmployee) {
        String[] tokens = line.split(", ");
        String fullName = tokens[0];
        String email = tokens[1];
        String phoneNumber = tokens[2];
        String dateOfBirth = tokens[3];
        Double monthlySalary = Double.parseDouble(tokens[4]);
        Employee employee =
                new Employee(fullName, email, phoneNumber, dateOfBirth, monthlySalary);
        allEmployee.putIfAbsent(fullName, employee);
    }
}

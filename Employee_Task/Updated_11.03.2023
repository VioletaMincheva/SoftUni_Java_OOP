package EmployeeApp;

import java.io.*;
import java.text.ParseException;
import java.util.*;
import java.util.stream.Collectors;

import static java.util.Map.Entry.comparingByValue;

public class EmployeeAppRun {
    public static void main(String[] args) throws IOException, ParseException {
//Reading information from files related to employees and tasks
        String inputEmployeePath = "C:\\Users\\Admin\\Desktop\\Employees_Tasks\\InputEmployeeApp.txt";
        String inputTasksPath = "C:\\Users\\Admin\\Desktop\\Employees_Tasks\\InputTaskApp.txt";
        String outputPath = "C:\\Users\\Admin\\Desktop\\Employees_Tasks\\OutputEmployeeApp.txt";

        BufferedReader inEmployee = new BufferedReader(new FileReader(inputEmployeePath));
        BufferedReader inTask = new BufferedReader(new FileReader(inputTasksPath));
        BufferedWriter out = new BufferedWriter(new FileWriter(outputPath));
//Create a map of all employees
        Map<String, Employee> allEmployees = new HashMap<>();
//Create a map of all tasks
        Map<String, List<Task>> employeeTasksList = new HashMap<>();
//Read and Create all employees
        String lineEmployee = inEmployee.readLine();
        while (lineEmployee != null) {
            createEmployee(lineEmployee, allEmployees);
            lineEmployee = inEmployee.readLine();
        }
//print current report related to all employees
        printReportEmployees(allEmployees);
//Read and Create all tasks
        String lineTasks = inTask.readLine();
        while (lineTasks != null) {
            createTask(lineTasks, employeeTasksList);
            lineTasks = inTask.readLine();
        }
//print current report related to all employees and their tasks
        printReportTasks(employeeTasksList);

//Update employee information
        //Updated phone number
        updatedEmployeePhoneNumber("+359898123456", "Desislava Ivanova", allEmployees);
        //Updated salary
        updatedEmployeeSalary(1.2, "Radoslav Minchev", allEmployees);
        //Updated full name
        updatedEmployeeFullName("Marina Ivanova", "Marina Terzieva",
                allEmployees, employeeTasksList);
        //Updated email
        updatedEmployeeEmail("alexander.trifonov@icloud.com", "Alexander Trifonov", allEmployees);

//Delete employee and correction of all related information
        deleteEmployee("Hristina Kostova",
                "Desislava Ivanova",
                allEmployees, employeeTasksList);
//print current report related to all employees and tasks
        printReportEmployees(allEmployees);
        printReportTasks(employeeTasksList);

//Update Tasks
        //Updated title
        updatedTaskTitle("Title1000", "Title1", employeeTasksList);
        //Updated description
        updatedTaskDescription("description1000", "description1", employeeTasksList);
        //Updated assignedEmployeeFullName
        updatedTaskAssignedEmployeeFullName("Title1000",
                "Desislava Ivanova", "Petar Petrov", employeeTasksList);
        //Updated dueDate
        updatedTaskDueDate("Title1000", "20-Feb-2023", "16-Feb-2023", employeeTasksList);
        //Updated statusCompleted
        updatedTaskStatusCompleted("Title15", "yes", "no", employeeTasksList);
//Delete task
        deleteTask("Calls", employeeTasksList);

//print current report related to all employees and tasks
        printReportEmployees(allEmployees);
        printReportTasks(employeeTasksList);

//Display 5 employees who completed the largest number of tasks in the past month
        String currentDate = "11-Mar-2023";
        int startDayFeb = 11;
        int endDayFeb = 28;
        int startDayMarch = 01;
        int endDayMarch = 11;
        Map<String, Integer> employeesWhoCompletedUpperFiveTasksInLastMonth = new HashMap<>();

        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            for (Task task : entry.getValue()) {
                if (task.getStatusCompleted().equals("yes")) {
                    String stringDueDate = task.getDueDate(); //24-Feb-2023
                    int dayDueDate = Integer.parseInt(stringDueDate.substring(0, 2)); //24
                    String monthDueDate = stringDueDate.substring(3, 6); //Feb
                    if (monthDueDate.equals("Feb") && dayDueDate >= startDayFeb && dayDueDate <= endDayFeb) {
                        String nameEmployee = entry.getKey();
                        if (!employeesWhoCompletedUpperFiveTasksInLastMonth.containsKey(nameEmployee)) {
                            employeesWhoCompletedUpperFiveTasksInLastMonth.put(nameEmployee, 1);
                        } else {
                            employeesWhoCompletedUpperFiveTasksInLastMonth
                                    .put(nameEmployee, employeesWhoCompletedUpperFiveTasksInLastMonth.get(nameEmployee) + 1);
                        }
                    } else if (monthDueDate.equals("Mar") && dayDueDate >= startDayMarch && dayDueDate <= endDayMarch) {
                        String nameEmployee = entry.getKey();
                        if (!employeesWhoCompletedUpperFiveTasksInLastMonth.containsValue(nameEmployee)) {
                            employeesWhoCompletedUpperFiveTasksInLastMonth.put(nameEmployee, 1);
                        } else {
                            employeesWhoCompletedUpperFiveTasksInLastMonth
                                    .put(nameEmployee, employeesWhoCompletedUpperFiveTasksInLastMonth.get(nameEmployee) + 1);
                        }
                    }
                }
            }
        }

        Map<String,Integer> topFive =
                employeesWhoCompletedUpperFiveTasksInLastMonth
                        .entrySet()
                        .stream()
                        .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
                        .limit(5)
                        .collect(Collectors
                                .toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));

        topFive.entrySet().forEach(e-> System.out.println(e.getKey()));

        inEmployee.close();
        out.close();
    }

    private static void deleteTask(String titleTaskForDeletion, Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            List<Task> currentList = entry.getValue();
            for (Task task : currentList) {
                if (task.getTitle().equals(titleTaskForDeletion)) {
                    currentList.remove(task);
                }
            }
        }
    }

    private static void updatedTaskStatusCompleted(String title, String updateStatusCompleted, String oldStatusCompleted,
                                                   Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            List<Task> currentList = entry.getValue();
            for (Task task : currentList) {
                if (task.getTitle().equals(title) && task.getStatusCompleted().equals(oldStatusCompleted)) {
                    task.setStatusCompleted(updateStatusCompleted);
                }
            }
        }
    }

    private static void updatedTaskDueDate(String title, String updateDueDate, String oldDueDate,
                                           Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            List<Task> currentList = entry.getValue();
            for (Task task : currentList) {
                if (task.getTitle().equals(title) && task.getDueDate().equals(oldDueDate)) {
                    task.setDueDate(updateDueDate);
                }
            }
        }
    }

    private static void updatedTaskAssignedEmployeeFullName(String title,
                                                            String updateAssignedEmployeeFullName,
                                                            String oldAssignedEmployeeFullName,
                                                            Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            if (entry.getKey().equals(oldAssignedEmployeeFullName)) {
                List<Task> currentList = entry.getValue();
                for (Task task : currentList) {
                    if (task.getTitle().equals(title) && task.getAssignedEmployeeFullName().equals(oldAssignedEmployeeFullName)) {
                        task.setAssignedEmployeeFullName(updateAssignedEmployeeFullName);
                        if (employeeTasksList.containsKey(updateAssignedEmployeeFullName)) {
                            employeeTasksList.get(updateAssignedEmployeeFullName).add(task);
                        } else {
                            employeeTasksList.put(updateAssignedEmployeeFullName, new ArrayList<>());
                            employeeTasksList.get(updateAssignedEmployeeFullName).add(task);
                        }
                        currentList.remove(task);
                    }
                }
            }
        }
    }

    private static void updatedTaskDescription(String updateDescription, String oldDescription,
                                               Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            List<Task> currentList = entry.getValue();
            for (Task task : currentList) {
                if (task.getDescription().equals(oldDescription)) {
                    task.setDescription(updateDescription);
                }
            }
        }
    }

    private static void updatedTaskTitle(String updatedTitle, String oldTitle,
                                         Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            List<Task> currentList = entry.getValue();
            for (Task task : currentList) {
                if (task.getTitle().equals(oldTitle)) {
                    task.setTitle(updatedTitle);
                }
            }
        }
    }

    private static void deleteEmployee(String fullNameEmployeeDeletion,
                                       String fullNameEmployeeWhichReferenceTasksFromDeletionEmployee,
                                       Map<String, Employee> allEmployees,
                                       Map<String, List<Task>> employeeTasksList) {
        allEmployees.remove(fullNameEmployeeDeletion);
        if (employeeTasksList.containsKey(fullNameEmployeeDeletion)) {
            List<Task> temporaryList = employeeTasksList.get(fullNameEmployeeDeletion);
            employeeTasksList.remove(fullNameEmployeeDeletion);
            if (!employeeTasksList.containsKey(fullNameEmployeeWhichReferenceTasksFromDeletionEmployee)) {
                employeeTasksList.put(fullNameEmployeeWhichReferenceTasksFromDeletionEmployee, temporaryList);
            } else {
                for (Task task : temporaryList) {
                    employeeTasksList.get(fullNameEmployeeWhichReferenceTasksFromDeletionEmployee).add(task);
                }
            }
        }
    }

    private static void updatedEmployeeEmail(String updatedEmail, String fullNameEmployee, Map<String, Employee> allEmployees) {
        allEmployees.get(fullNameEmployee).setEmail(updatedEmail);
    }

    private static void updatedEmployeeFullName(String oldName,
                                                String updatedName,
                                                Map<String, Employee> allEmployees,
                                                Map<String, List<Task>> employeeTasksList) {
        //update FullName in allEmployeesMap
        allEmployees.get(oldName).setFullName(updatedName);
        Employee employeeWithUpdatedName = allEmployees.get(oldName);
        allEmployees.remove(oldName);
        allEmployees.put(updatedName, employeeWithUpdatedName);
        //update FullName in employeeTasksListMap
        if (employeeTasksList.containsKey(oldName)) {
            List<Task> temporaryList = employeeTasksList.get(oldName);
            employeeTasksList.remove(oldName);
            employeeTasksList.putIfAbsent(updatedName, new ArrayList<>());
            for (Task task : temporaryList) {
                employeeTasksList.get(updatedName).add(task);
            }
        }
    }

    private static void updatedEmployeeSalary(double multiplier, String fullNameEmployee, Map<String, Employee> allEmployees) {
        Double salaryUpdate = allEmployees.get(fullNameEmployee).getMonthlySalary() * multiplier;
        allEmployees.get(fullNameEmployee).setMonthlySalary(salaryUpdate);
    }

    private static void updatedEmployeePhoneNumber(String phoneNumberUpdate, String fullNameEmployee,
                                                   Map<String, Employee> allEmployee) {
        allEmployee.get(fullNameEmployee).setPhoneNumber(phoneNumberUpdate);
    }

    private static void printReportTasks(Map<String, List<Task>> employeeTasksList) {
        for (Map.Entry<String, List<Task>> entry : employeeTasksList.entrySet()) {
            List<Task> currentList = entry.getValue();
            for (Task task : currentList) {
                System.out.println(task.toString());
            }
        }
    }

    private static void printReportEmployees(Map<String, Employee> allEmployee) {
        allEmployee.values().forEach(e -> System.out.println(e.toString()));
    }

    private static void createTask(String lineTasks, Map<String, List<Task>> employeeTasksList) {
        String[] tokens = lineTasks.split(", ");
        String title = tokens[0];
        String description = tokens[1];
        String assignedEmployeeFullName = tokens[2];
        String dueDate = tokens[3];
        String statusCompleted = tokens[4];
        Task task = new Task(title, description, assignedEmployeeFullName, dueDate, statusCompleted);
        if (!employeeTasksList.containsKey(assignedEmployeeFullName)) {
            employeeTasksList.put(assignedEmployeeFullName, new ArrayList<>());
            employeeTasksList.get(assignedEmployeeFullName).add(task);
        } else {
            employeeTasksList.get(assignedEmployeeFullName).add(task);
        }
    }

    private static void createEmployee(String line, Map<String, Employee> allEmployee) {
        String[] tokens = line.split(", ");
        String fullName = tokens[0];
        String email = tokens[1];
        String phoneNumber = tokens[2];
        String dateOfBirth = tokens[3];
        Double monthlySalary = Double.parseDouble(tokens[4]);
        Employee employee =
                new Employee(fullName, email, phoneNumber, dateOfBirth, monthlySalary);
        allEmployee.putIfAbsent(fullName, employee);
    }
}
